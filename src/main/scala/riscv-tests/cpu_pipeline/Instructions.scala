package cpu_pipeline_riscv_tests

import chisel3.util._

object Instructions{
    // Memory access instructions
    val LW      = BitPat("b????_????_????_????_?010_????_?000_0011")
    val SW      = BitPat("b????_????_????_????_?010_????_?010_0011")

    // Addition instructions
    val ADD     = BitPat("b0000_000?_????_????_?000_????_?011_0011")
    val ADDI    = BitPat("b????_????_????_????_?000_????_?001_0011")
    val SUB     = BitPat("b0100_000?_????_????_?000_????_?011_0011")

    // Logical instruct_ions
    val AND     = BitPat("b0000_000?_????_????_?111_????_?011_0011")
    val OR      = BitPat("b0000_000?_????_????_?110_????_?011_0011")
    val XOR     = BitPat("b0000_000?_????_????_?100_????_?011_0011")
    val ANDI    = BitPat("b????_????_????_????_?111_????_?001_0011")
    val ORI     = BitPat("b????_????_????_????_?110_????_?001_0011")
    val XORI    = BitPat("b????_????_????_????_?100_????_?001_0011")

    // Shift instructions
    val SLL     = BitPat("b0000_000?_????_????_?001_????_?011_0011")
    val SRL     = BitPat("b0000_000?_????_????_?101_????_?011_0011")
    val SRA     = BitPat("b0100_000?_????_????_?101_????_?011_0011")
    val SLLI    = BitPat("b0000_000?_????_????_?001_????_?001_0011")
    val SRLI    = BitPat("b0000_000?_????_????_?101_????_?001_0011")
    val SRAI    = BitPat("b0100_000?_????_????_?101_????_?001_0011")

    // Comparison instructions
    val SLT     = BitPat("b0000_000?_????_????_?010_????_?011_0011")
    val SLTU    = BitPat("b0000_000?_????_????_?011_????_?011_0011")
    val SLTI    = BitPat("b????_????_????_????_?010_????_?001_0011")
    val SLTIU   = BitPat("b????_????_????_????_?011_????_?001_0011")

    // Branch instructions
    val BEQ     = BitPat("b????_????_????_????_?000_????_?110_0011")
    val BNE     = BitPat("b????_????_????_????_?001_????_?110_0011")
    val BLT     = BitPat("b????_????_????_????_?100_????_?110_0011")
    val BGE     = BitPat("b????_????_????_????_?101_????_?110_0011")
    val BLTU    = BitPat("b????_????_????_????_?110_????_?110_0011")
    val BGEU    = BitPat("b????_????_????_????_?111_????_?110_0011")

    // Jump instructions
    val JAL     = BitPat("b????_????_????_????_????_????_?110_1111")
    val JALR    = BitPat("b????_????_????_????_?000_????_?110_0111")

    // Immediate load instructions
    val LUI     = BitPat("b????_????_????_????_????_????_?011_0111")
    val AUIPC   = BitPat("b????_????_????_????_????_????_?001_0111")

    // Control and Status Register instructions
    val CSRRW   = BitPat("b????_????_????_????_?001_????_?111_0011")
    val CSRRWI  = BitPat("b????_????_????_????_?101_????_?111_0011")
    val CSRRS   = BitPat("b????_????_????_????_?010_????_?111_0011")
    val CSRRSI  = BitPat("b????_????_????_????_?110_????_?111_0011")
    val CSRRC   = BitPat("b????_????_????_????_?011_????_?111_0011")
    val CSRRCI  = BitPat("b????_????_????_????_?111_????_?111_0011")

    // Environment call instructions
    val ECALL   = BitPat("b0000_0000_0000_0000_0000_0000_0111_0011")
    
    // custom instructions
    val UNIMP   = BitPat("b1100_0000_0000_0000_0001_0000_0111_0011")
}